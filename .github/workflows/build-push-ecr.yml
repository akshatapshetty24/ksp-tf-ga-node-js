name: 🐳 Build and Push Docker Image to ECR

on:
  workflow_run:
    workflows: ["🚀 Deploy AWS Infra"]
    types:
      - completed

jobs:
  docker-build-push:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get AWS account ID
        id: get-account-id
        run: |
          echo "ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)" >> $GITHUB_ENV

      - name: Authenticate Docker to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # Node.js Dependency Scan
      - name: Install npm dependencies
        working-directory: terraform/app/
        run: npm install

      - name: Run npm audit
        working-directory: terraform/app/
        continue-on-error: true
        run: |
          npm audit --audit-level=high || echo "npm audit found issues"

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
          trivy --version



      # Trivy Config Scan (Dockerfile & Kubernetes manifests)
      - name: Run Trivy config scan on Dockerfile
        continue-on-error: true
        run: |
          trivy config --severity HIGH,CRITICAL --exit-code 1 --no-progress terraform/app/ || echo "Dockerfile config scan found issues"

      - name: Run Trivy config scan on Kubernetes manifests
        continue-on-error: true
        run: |
          trivy config --severity HIGH,CRITICAL --exit-code 1 --no-progress terraform/k8s/ || echo "K8s manifest config scan found issues"

      - name: Build Docker Image
        run: |
          REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ksp-ecr-app-repository
          IMAGE_TAG=latest

          # Build Docker image from terraform/app/ directory
          docker build -t $REPOSITORY_URI:$IMAGE_TAG -f terraform/app/Dockerfile terraform/app/

      - name: Debug image name
        run: |
          echo "Image to scan: $REPOSITORY_URI:$IMAGE_TAG"

    
      # Trivy Image Scan
      - name: Scan Docker image with Trivy
        continue-on-error: true
        run: |
          trivy image --severity HIGH,CRITICAL --exit-code 1 --no-progress $REPOSITORY_URI:$IMAGE_TAG || echo "Image scan found issues"
          

      - name: Push Docker Image to ECR Repository
        run: |
          REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ksp-ecr-app-repository
          IMAGE_TAG=latest

          # Push to ECR
          docker push $REPOSITORY_URI:$IMAGE_TAG


      # Slack Notification if anything fails
      - name: Send Slack Notification on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": ":x: CI/CD pipeline failed during *Build-Scan-Push to ECR* for repository: *${{ github.repository }}* on branch *${{ github.ref }}*."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # Slack Notification on Success
      - name: Send Slack Notification on Success
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": ":white_check_mark: CI/CD pipeline *Build-Scan-Push to ECR* executed successfully for repository: *${{ github.repository }}* on branch *${{ github.ref }}*."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
        
